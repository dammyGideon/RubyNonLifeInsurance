// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RubyNonlife.Infrastructure.Persistence;

#nullable disable

namespace RubyNonlife.Infrastructure.Migrations
{
    [DbContext(typeof(RubyDbContext))]
    [Migration("20250418004847_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RubyNonlife.Domain.Models.ApprovalWorks.WorkFlowApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalLevel")
                        .HasColumnType("int");

                    b.Property<int>("ApproverUserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkFlowId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowApprovingOfficeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowId");

                    b.HasIndex("WorkflowApprovingOfficeId");

                    b.ToTable("WorkFlowApprovals");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ApprovalWorks.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApprovalCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsServiceNotified")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("PolicySourceId")
                        .HasColumnType("int");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<string>("RequestTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkflowProcessIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ApprovalWorks.WorkflowApprovingOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalLevel")
                        .HasColumnType("int");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovingOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovingOfficeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<int?>("HeldByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApprovalCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnHold")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalLevel")
                        .HasDatabaseName("IX_ApprovalLevel");

                    b.HasIndex("ApprovingOfficeId")
                        .HasDatabaseName("IX_ApprovingOfficeId");

                    b.HasIndex("WorkflowId")
                        .HasDatabaseName("IX_WorkflowId");

                    b.ToTable("WorkflowApprovingOffices");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audilogs");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.BankLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BankLookups");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TitleId");

                    b.ToTable("ContactPerson");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssociationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AverageNumberOfMembersOrEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Bvn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BVN");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfInCorporation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("EstimatedAnnualRevenue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ExpenseLeger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ForeignMailingAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasDualCitizenship")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPendingModificationRequest")
                        .HasColumnType("bit");

                    b.Property<string>("IncomeLedger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPoliticallyExposed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("MaidenName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("NatureOfBusinessId")
                        .HasColumnType("int");

                    b.Property<string>("NinNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PayableLedger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredCommunicationMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RcNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReasonForCreation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("ResidencePermitNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RmId")
                        .HasColumnType("int");

                    b.Property<int?>("StateOfOriginId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxIdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("NatureOfBusinessId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StateOfOriginId");

                    b.HasIndex("TitleId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime");

                    b.Property<string>("FullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Landmark")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCustomerDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBankAccounts");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("MimeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("CustomerDocuments");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerLedgers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerLedger2", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("CustomerLedger2", (string)null);
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerModification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CustomerApprovalId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerModificationJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerOldJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerApprovalId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerModification", (string)null);
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerModificationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerModificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentName")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerModificationId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("CustomerModificationDocuments");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerOccupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AnnualIncomeBand")
                        .HasPrecision(10, 2)
                        .HasColumnType("money");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Employer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOccupations");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerOnboardingApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalStage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStatusChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOnboardingApprovals");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerPhoneBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhoneBooks");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerTitleLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CustomerTitleLookups");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomersBkp", b =>
                {
                    b.Property<string>("AssociationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssociationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AverageNumberOfMembersOrEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Bvn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BVN");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfInCorporation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("EstimatedAnnualRevenue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ForeignMailingAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("GenderId")
                        .HasColumnType("smallint");

                    b.Property<bool?>("HasDualCitizenship")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPendingModificationRequest")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPoliticallyExposed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaidenName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("MaritalStatusId")
                        .HasColumnType("smallint");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("NatureOfBusinessId")
                        .HasColumnType("int");

                    b.Property<string>("NinNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("OccupationId")
                        .HasColumnType("int");

                    b.Property<string>("PreferredCommunicationMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RcNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReasonForCreation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("ResidencePermitNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RmId")
                        .HasColumnType("int");

                    b.Property<int?>("StateOfOriginId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxIdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Customers_bkp", (string)null);
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.NatureOfBusinessLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NatureOfBusinessLookups");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinesslineId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LineOfBusinessAttributeCategories");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeDropdownMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ChildAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("ChildValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("ParentValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChildAttributeId");

                    b.HasIndex("ParentAttributeId");

                    b.ToTable("LineOfBusinessAttributeDropdownMappings");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSumAssured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiredAtQuoting")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ViolationSpecification")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("LineOfBusinessAttributeItems");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessInsuredObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("LineOfBusinessInsuredObjects");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.BusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BusinessTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6933),
                            Name = "New Business",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6933)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6935),
                            Name = "Renewal",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6935)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6936),
                            Name = "Endorsement",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6936)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.CalculationsParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CalculationsParameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5855),
                            Name = "Sum Insured",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5854)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5856),
                            Name = "Rate",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5856)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.CarMake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CarMakes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7719),
                            Name = "Toyota",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7718)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7721),
                            Name = "Honda",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7720)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7722),
                            Name = "Ford",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7722)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7724),
                            Name = "Chevrolet",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7723)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7725),
                            Name = "Nissan",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7724)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7726),
                            Name = "BMW",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7726)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7727),
                            Name = "Mercedes-Benz",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7727)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7729),
                            Name = "Volkswagen",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7728)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7730),
                            Name = "Hyundai",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7729)
                        },
                        new
                        {
                            Id = 10,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7731),
                            Name = "Audi",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7730)
                        },
                        new
                        {
                            Id = 11,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7732),
                            Name = "Lexus",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7732)
                        },
                        new
                        {
                            Id = 12,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7733),
                            Name = "Subaru",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7733)
                        },
                        new
                        {
                            Id = 13,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7735),
                            Name = "Mazda",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7734)
                        },
                        new
                        {
                            Id = 14,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7736),
                            Name = "Tesla",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7735)
                        },
                        new
                        {
                            Id = 15,
                            CreateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7737),
                            Name = "Kia",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7736)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarMakeId")
                        .HasColumnType("int");

                    b.Property<int?>("CarModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarMakeId");

                    b.HasIndex("CarModelId");

                    b.ToTable("CarModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarMakeId = 1,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7839),
                            Name = "Corolla",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7840)
                        },
                        new
                        {
                            Id = 2,
                            CarMakeId = 1,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7842),
                            Name = "Camry",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7842)
                        },
                        new
                        {
                            Id = 3,
                            CarMakeId = 1,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7843),
                            Name = "RAV4",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7844)
                        },
                        new
                        {
                            Id = 4,
                            CarMakeId = 2,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7845),
                            Name = "Civic",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7845)
                        },
                        new
                        {
                            Id = 5,
                            CarMakeId = 2,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7846),
                            Name = "Accord",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7846)
                        },
                        new
                        {
                            Id = 6,
                            CarMakeId = 2,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7847),
                            Name = "CR-V",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7848)
                        },
                        new
                        {
                            Id = 7,
                            CarMakeId = 3,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7849),
                            Name = "F-150",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7849)
                        },
                        new
                        {
                            Id = 8,
                            CarMakeId = 3,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7850),
                            Name = "Mustang",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7850)
                        },
                        new
                        {
                            Id = 9,
                            CarMakeId = 3,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7851),
                            Name = "Escape",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7852)
                        },
                        new
                        {
                            Id = 10,
                            CarMakeId = 4,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7853),
                            Name = "Silverado",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7853)
                        },
                        new
                        {
                            Id = 11,
                            CarMakeId = 4,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7854),
                            Name = "Equinox",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7855)
                        },
                        new
                        {
                            Id = 12,
                            CarMakeId = 4,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7855),
                            Name = "Malibu",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7856)
                        },
                        new
                        {
                            Id = 13,
                            CarMakeId = 5,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7857),
                            Name = "Altima",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7857)
                        },
                        new
                        {
                            Id = 14,
                            CarMakeId = 5,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7858),
                            Name = "Sentra",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7859)
                        },
                        new
                        {
                            Id = 15,
                            CarMakeId = 5,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7860),
                            Name = "Rogue",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7860)
                        },
                        new
                        {
                            Id = 16,
                            CarMakeId = 6,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7861),
                            Name = "3 Series",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7861)
                        },
                        new
                        {
                            Id = 17,
                            CarMakeId = 6,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7862),
                            Name = "X5",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7863)
                        },
                        new
                        {
                            Id = 18,
                            CarMakeId = 6,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7864),
                            Name = "5 Series",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7864)
                        },
                        new
                        {
                            Id = 19,
                            CarMakeId = 7,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7865),
                            Name = "C-Class",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7865)
                        },
                        new
                        {
                            Id = 20,
                            CarMakeId = 7,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7866),
                            Name = "E-Class",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7867)
                        },
                        new
                        {
                            Id = 21,
                            CarMakeId = 7,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7871),
                            Name = "GLC",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7883)
                        },
                        new
                        {
                            Id = 22,
                            CarMakeId = 8,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7884),
                            Name = "Golf",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7884)
                        },
                        new
                        {
                            Id = 23,
                            CarMakeId = 8,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7885),
                            Name = "Passat",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7886)
                        },
                        new
                        {
                            Id = 24,
                            CarMakeId = 8,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7887),
                            Name = "Tiguan",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7887)
                        },
                        new
                        {
                            Id = 25,
                            CarMakeId = 9,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7888),
                            Name = "Elantra",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7889)
                        },
                        new
                        {
                            Id = 26,
                            CarMakeId = 9,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7889),
                            Name = "Sonata",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7890)
                        },
                        new
                        {
                            Id = 27,
                            CarMakeId = 9,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7891),
                            Name = "Tucson",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7891)
                        },
                        new
                        {
                            Id = 28,
                            CarMakeId = 10,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7892),
                            Name = "A4",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7893)
                        },
                        new
                        {
                            Id = 29,
                            CarMakeId = 10,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7894),
                            Name = "Q5",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7894)
                        },
                        new
                        {
                            Id = 30,
                            CarMakeId = 10,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7895),
                            Name = "A6",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7895)
                        },
                        new
                        {
                            Id = 31,
                            CarMakeId = 11,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7901),
                            Name = "RX",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7903)
                        },
                        new
                        {
                            Id = 32,
                            CarMakeId = 11,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7904),
                            Name = "ES",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7904)
                        },
                        new
                        {
                            Id = 33,
                            CarMakeId = 11,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7905),
                            Name = "NX",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7906)
                        },
                        new
                        {
                            Id = 34,
                            CarMakeId = 12,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7907),
                            Name = "Impreza",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7907)
                        },
                        new
                        {
                            Id = 35,
                            CarMakeId = 12,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7908),
                            Name = "Forester",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7908)
                        },
                        new
                        {
                            Id = 36,
                            CarMakeId = 12,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7909),
                            Name = "Outback",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7910)
                        },
                        new
                        {
                            Id = 37,
                            CarMakeId = 13,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7911),
                            Name = "Mazda3",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7911)
                        },
                        new
                        {
                            Id = 38,
                            CarMakeId = 13,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7912),
                            Name = "CX-5",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7913)
                        },
                        new
                        {
                            Id = 39,
                            CarMakeId = 13,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7914),
                            Name = "Mazda6",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7914)
                        },
                        new
                        {
                            Id = 40,
                            CarMakeId = 14,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7915),
                            Name = "Model 3",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7915)
                        },
                        new
                        {
                            Id = 41,
                            CarMakeId = 14,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7916),
                            Name = "Model S",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7917)
                        },
                        new
                        {
                            Id = 42,
                            CarMakeId = 14,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7918),
                            Name = "Model X",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7918)
                        },
                        new
                        {
                            Id = 43,
                            CarMakeId = 15,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7919),
                            Name = "Optima",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7920)
                        },
                        new
                        {
                            Id = 44,
                            CarMakeId = 15,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7921),
                            Name = "Sorento",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7921)
                        },
                        new
                        {
                            Id = 45,
                            CarMakeId = 15,
                            CreateAt = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7922),
                            Name = "Sportage",
                            UpdateAt = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7922)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.CollectionSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CollectionSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5957),
                            Name = "Sum Insured",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5957)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5959),
                            Name = "Gross Premium",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5958)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.CostOfInsuranceFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CostOfInsuranceFrequencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6600),
                            Name = "1 year",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6599)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6602),
                            Name = "2 year",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6601)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6604),
                            Name = "3 year",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6603)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6605),
                            Name = "4 year",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6604)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.CoversRiderLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CoversRiderLimits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5630),
                            Name = "Inclusive",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5629)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5632),
                            Name = "Value",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5631)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.Datatype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Datatypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6280),
                            Name = "Text",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6280)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6282),
                            Name = "Number",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6281)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6284),
                            Name = "Yes-No",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6283)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6286),
                            Name = "Number",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6284)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.DatatypeLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DatatypeLengths");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6175),
                            Length = 10,
                            Name = "10 Characters",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6174)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6177),
                            Length = 17,
                            Name = "17 Characters",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6176)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6179),
                            Length = 4,
                            Name = "4 Characters",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6178)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6181),
                            Length = 20,
                            Name = "20 Characters",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6180)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.DocumentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppModule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DocumentCategory");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.DocumentLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcceptableMimeTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalDocUid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentCategoryId");

                    b.ToTable("DocumentLookups");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.FeeLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FeeLookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(9413),
                            Name = "Management Fee",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9412)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(9415),
                            Name = "Broker Fee",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9414)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(9416),
                            Name = "Agent Fee",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9416)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.GenderLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GenderLookup");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.LocalGovernmentAreaLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("LocalGovernmentAreaLookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9062),
                            Name = "Aba North",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9062)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9065),
                            Name = "Aba South",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9066)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9067),
                            Name = "Arochukwu",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9067)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9068),
                            Name = "Bende",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9069)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9070),
                            Name = "Ikwuano",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9070)
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9072),
                            Name = "Isiala Ngwa North",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9072)
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9073),
                            Name = "Isiala Ngwa South",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9074)
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9075),
                            Name = "Isuikwuato",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9075)
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9076),
                            Name = "Obi Ngwa",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9076)
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9078),
                            Name = "Ohafia",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9079)
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9080),
                            Name = "Osisioma",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9080)
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9081),
                            Name = "Ugwunagbo",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9081)
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9082),
                            Name = "Ukwa East",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9083)
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9084),
                            Name = "Ukwa West",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9084)
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9085),
                            Name = "Umuahia North",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9085)
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9086),
                            Name = "Umuahia South",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9087)
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9088),
                            Name = "Umu Nneochi",
                            StateId = 1,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9088)
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9090),
                            Name = "Demsa",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9090)
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9095),
                            Name = "Fufure",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9097)
                        },
                        new
                        {
                            Id = 20,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9098),
                            Name = "Ganye",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9098)
                        },
                        new
                        {
                            Id = 21,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9099),
                            Name = "Girei",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9099)
                        },
                        new
                        {
                            Id = 22,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9100),
                            Name = "Gombi",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9101)
                        },
                        new
                        {
                            Id = 23,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9102),
                            Name = "Guyuk",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9102)
                        },
                        new
                        {
                            Id = 24,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9103),
                            Name = "Hong",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9103)
                        },
                        new
                        {
                            Id = 25,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9104),
                            Name = "Jada",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9105)
                        },
                        new
                        {
                            Id = 26,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9106),
                            Name = "Lamurde",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9106)
                        },
                        new
                        {
                            Id = 27,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9107),
                            Name = "Madagali",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9107)
                        },
                        new
                        {
                            Id = 28,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9108),
                            Name = "Maiha",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9108)
                        },
                        new
                        {
                            Id = 29,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9109),
                            Name = "Mayo-Belwa",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9110)
                        },
                        new
                        {
                            Id = 30,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9111),
                            Name = "Michika",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9111)
                        },
                        new
                        {
                            Id = 31,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9112),
                            Name = "Mubi North",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9113)
                        },
                        new
                        {
                            Id = 32,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9113),
                            Name = "Mubi South",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9114)
                        },
                        new
                        {
                            Id = 33,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9115),
                            Name = "Numan",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9115)
                        },
                        new
                        {
                            Id = 34,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9117),
                            Name = "Shelleng",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9117)
                        },
                        new
                        {
                            Id = 35,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9118),
                            Name = "Song",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9119)
                        },
                        new
                        {
                            Id = 36,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9120),
                            Name = "Toungo",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9120)
                        },
                        new
                        {
                            Id = 37,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9121),
                            Name = "Yola North",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9121)
                        },
                        new
                        {
                            Id = 38,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9122),
                            Name = "Yola South",
                            StateId = 2,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9123)
                        },
                        new
                        {
                            Id = 100,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9124),
                            Name = "Agege",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9124)
                        },
                        new
                        {
                            Id = 101,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9125),
                            Name = "Ajeromi-Ifelodun",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9125)
                        },
                        new
                        {
                            Id = 102,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9126),
                            Name = "Alimosho",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9127)
                        },
                        new
                        {
                            Id = 103,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9128),
                            Name = "Amuwo-Odofin",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9128)
                        },
                        new
                        {
                            Id = 104,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9129),
                            Name = "Apapa",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9129)
                        },
                        new
                        {
                            Id = 105,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9130),
                            Name = "Badagry",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9131)
                        },
                        new
                        {
                            Id = 106,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9132),
                            Name = "Epe",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9132)
                        },
                        new
                        {
                            Id = 107,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9133),
                            Name = "Eti-Osa",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9133)
                        },
                        new
                        {
                            Id = 108,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9134),
                            Name = "Ibeju-Lekki",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9135)
                        },
                        new
                        {
                            Id = 109,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9136),
                            Name = "Ifako-Ijaiye",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9136)
                        },
                        new
                        {
                            Id = 110,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9137),
                            Name = "Ikeja",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9137)
                        },
                        new
                        {
                            Id = 111,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9138),
                            Name = "Ikorodu",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9138)
                        },
                        new
                        {
                            Id = 112,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9140),
                            Name = "Kosofe",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9140)
                        },
                        new
                        {
                            Id = 113,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9141),
                            Name = "Lagos Island",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9141)
                        },
                        new
                        {
                            Id = 114,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9142),
                            Name = "Lagos Mainland",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9142)
                        },
                        new
                        {
                            Id = 115,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9143),
                            Name = "Mushin",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9144)
                        },
                        new
                        {
                            Id = 116,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9145),
                            Name = "Ojo",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9145)
                        },
                        new
                        {
                            Id = 117,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9146),
                            Name = "Oshodi-Isolo",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9146)
                        },
                        new
                        {
                            Id = 118,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9147),
                            Name = "Shomolu",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9148)
                        },
                        new
                        {
                            Id = 119,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9149),
                            Name = "Surulere",
                            StateId = 24,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9149)
                        },
                        new
                        {
                            Id = 200,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9150),
                            Name = "Ajingi",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9150)
                        },
                        new
                        {
                            Id = 201,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9152),
                            Name = "Albasu",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9152)
                        },
                        new
                        {
                            Id = 202,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9153),
                            Name = "Bagwai",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9153)
                        },
                        new
                        {
                            Id = 203,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9154),
                            Name = "Bebeji",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9155)
                        },
                        new
                        {
                            Id = 204,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9156),
                            Name = "Bichi",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9156)
                        },
                        new
                        {
                            Id = 205,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9157),
                            Name = "Bunkure",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9157)
                        },
                        new
                        {
                            Id = 206,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9158),
                            Name = "Dala",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9159)
                        },
                        new
                        {
                            Id = 207,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9161),
                            Name = "Dambatta",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9161)
                        },
                        new
                        {
                            Id = 208,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9162),
                            Name = "Dawakin Kudu",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9163)
                        },
                        new
                        {
                            Id = 209,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9164),
                            Name = "Dawakin Tofa",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9164)
                        },
                        new
                        {
                            Id = 210,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9165),
                            Name = "Doguwa",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9165)
                        },
                        new
                        {
                            Id = 211,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9166),
                            Name = "Fagge",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9166)
                        },
                        new
                        {
                            Id = 212,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9168),
                            Name = "Gabasawa",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9168)
                        },
                        new
                        {
                            Id = 213,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9169),
                            Name = "Garko",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9169)
                        },
                        new
                        {
                            Id = 214,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9170),
                            Name = "Garun Mallam",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9170)
                        },
                        new
                        {
                            Id = 215,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9171),
                            Name = "Gaya",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9172)
                        },
                        new
                        {
                            Id = 216,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9173),
                            Name = "Gezawa",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9173)
                        },
                        new
                        {
                            Id = 217,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9174),
                            Name = "Gwale",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9174)
                        },
                        new
                        {
                            Id = 218,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9175),
                            Name = "Gwarzo",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9176)
                        },
                        new
                        {
                            Id = 219,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9177),
                            Name = "Kabo",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9177)
                        },
                        new
                        {
                            Id = 220,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9178),
                            Name = "Kano Municipal",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9178)
                        },
                        new
                        {
                            Id = 221,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9179),
                            Name = "Karaye",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9180)
                        },
                        new
                        {
                            Id = 222,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9181),
                            Name = "Kibiya",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9181)
                        },
                        new
                        {
                            Id = 223,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9182),
                            Name = "Kiru",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9182)
                        },
                        new
                        {
                            Id = 224,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9183),
                            Name = "Kumbotso",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9184)
                        },
                        new
                        {
                            Id = 225,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9185),
                            Name = "Kunchi",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9185)
                        },
                        new
                        {
                            Id = 226,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9186),
                            Name = "Kura",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9186)
                        },
                        new
                        {
                            Id = 227,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9187),
                            Name = "Madobi",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9188)
                        },
                        new
                        {
                            Id = 228,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9189),
                            Name = "Makoda",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9189)
                        },
                        new
                        {
                            Id = 229,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9190),
                            Name = "Minjibir",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9190)
                        },
                        new
                        {
                            Id = 230,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9191),
                            Name = "Nasarawa",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9191)
                        },
                        new
                        {
                            Id = 231,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9192),
                            Name = "Rano",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9193)
                        },
                        new
                        {
                            Id = 232,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9194),
                            Name = "Rimin Gado",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9194)
                        },
                        new
                        {
                            Id = 233,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9195),
                            Name = "Rogo",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9195)
                        },
                        new
                        {
                            Id = 234,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9196),
                            Name = "Shanono",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9197)
                        },
                        new
                        {
                            Id = 235,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9197),
                            Name = "Sumaila",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9198)
                        },
                        new
                        {
                            Id = 236,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9199),
                            Name = "Takai",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9199)
                        },
                        new
                        {
                            Id = 237,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9200),
                            Name = "Tarauni",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9200)
                        },
                        new
                        {
                            Id = 238,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9201),
                            Name = "Tofa",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9202)
                        },
                        new
                        {
                            Id = 239,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9203),
                            Name = "Tsanyawa",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9203)
                        },
                        new
                        {
                            Id = 240,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9204),
                            Name = "Tudun Wada",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9204)
                        },
                        new
                        {
                            Id = 241,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9205),
                            Name = "Ungogo",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9205)
                        },
                        new
                        {
                            Id = 242,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9206),
                            Name = "Warawa",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9207)
                        },
                        new
                        {
                            Id = 243,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9208),
                            Name = "Wudil",
                            StateId = 19,
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(9208)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.MaritalStatusLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatusLookup");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PaymentFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentFrequencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5736),
                            DateTime = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5737),
                            Name = "One Time",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5736)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5738),
                            DateTime = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5739),
                            Name = "Adhoc",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5738)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5740),
                            DateTime = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5741),
                            Name = "Monthly",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5740)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5741),
                            DateTime = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5742),
                            Name = "Bi-Monthly",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5742)
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5743),
                            DateTime = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5744),
                            Name = "Quarterly",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5743)
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5744),
                            DateTime = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5745),
                            Name = "Bi-Annually",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5745)
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5746),
                            DateTime = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5747),
                            Name = "Annually",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5746)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyAdditionalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyAdditionalInformation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8690),
                            Name = "Premium on quote represents 100% of transaction whole",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8691)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8692),
                            Name = "Premium on quote represents 100% of AXA transactions only",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8693)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyBookingBeneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyBookingBeneficiaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8112),
                            Name = "Company",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8112)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8113),
                            Name = "Named Beneficiary",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8114)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyBookingInsurer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyBookingInsurers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8562),
                            Name = "Axa Mansard Insurance",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8562)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8564),
                            Name = "Aiico Insurance",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8564)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8565),
                            Name = "Leadway Assurance",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8566)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8567),
                            Name = "Mutual Benefits Assurance",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8567)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8568),
                            Name = "African Alliance Insurance",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8568)
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8569),
                            Name = "Royal Exchange Assurance",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8570)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyBookingPaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyBookingPaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8959),
                            Name = "Cash Payment",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8959)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8961),
                            Name = "Credit Note",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8961)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyBroker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyBrokers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8427),
                            Name = "A&G Insurance Brokers Ltd",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8427)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8429),
                            Name = "AIICO Insurance Brokers",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8429)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8431),
                            Name = "Boff & Co. Insurance Brokers Ltd",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8431)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8432),
                            Name = "Bluewaters Insurance Brokers Ltd",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8432)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8433),
                            Name = "Banksome Insurance Brokers Ltd",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8434)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyBusinessSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyBusinessSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8295),
                            Name = "Business is Direct",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8295)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8297),
                            Name = "Business is Brokered",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8297)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyBusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyBusinessTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8827),
                            Name = "Sole Insurance",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8828)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8829),
                            Name = "Co-Insurance",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8829)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8830),
                            Name = "Facultative Inward",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(8830)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyDocumentFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyDocumentFormats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6394),
                            Name = "Pdf",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6394)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6396),
                            Name = "DOC/DOCX",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6395)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyDocumentSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyDocumentSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6708),
                            Name = "3MB",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6707)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6709),
                            Name = "5MB",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6709)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PolicyDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyDurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7038),
                            Name = "less than 3 months",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7034)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7049),
                            Name = "3 months",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7048)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7051),
                            Name = "6 months",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7050)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7052),
                            Name = "9 months",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7052)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7054),
                            Name = "12 months",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7053)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.PriceRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PriceRatings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6493),
                            Name = "Flat",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6493)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6495),
                            Name = "Percentage",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6495)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6496),
                            Name = "Custom",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6496)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6497),
                            Name = "Rate Per Mille",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6497)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.ProductClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5256),
                            ImageName = "dadfb5f1-2cbc-4034-8d91-22239796d162.png",
                            IsDeleted = false,
                            Name = "Motor",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5249)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5259),
                            ImageName = "cab7b37f-8d5c-4e58-8814-c2d43fda9eb6.png",
                            IsDeleted = false,
                            Name = "Fire",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5258)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5261),
                            ImageName = "ea72cda4-ecb2-4b7c-8a52-137f711342a2.png",
                            IsDeleted = false,
                            Name = "Marine",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5260)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5263),
                            ImageName = "98c6a2cc-07a4-4b7f-bf79-678ada50d9c2.png",
                            IsDeleted = false,
                            Name = "Equipment",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5262)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5265),
                            ImageName = "85b49b67-11db-4747-b780-02bc1bfb8992.png",
                            IsDeleted = false,
                            Name = "Energy & Aviation",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5264)
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5266),
                            ImageName = "c40b95d6-420c-431b-9d92-f2a2065103e0.png",
                            IsDeleted = false,
                            Name = "Engineering",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5266)
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5268),
                            ImageName = "e5da823a-33ea-4f72-9f8a-19a3e69160a5.png",
                            IsDeleted = false,
                            Name = "General Accident",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5267)
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5270),
                            ImageName = "0c807e5f-6d38-4faa-8c8e-475b65914029.png",
                            IsDeleted = false,
                            Name = "Personal Lines",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5269)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5506),
                            Name = "Comprehensive Retail",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5504)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5515),
                            Name = "Retail",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5507)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5516),
                            Name = "Comprehensive Commercial",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5516)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5518),
                            Name = "Commercial",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5517)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5519),
                            Name = "Individuals & Commercial",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(5519)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.QuoteChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("QuoteChannels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7413),
                            Name = "Direct Agent",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7412)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7415),
                            Name = "Brokered",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7415)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.QuotePreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("QuotePreferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6843),
                            Name = "Simulation",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6842)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6844),
                            Name = "Customer Based",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6844)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.QuoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("QuoteTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7313),
                            Name = "Fleet",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7312)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 1, 48, 46, 907, DateTimeKind.Local).AddTicks(7315),
                            Name = "Individual",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7314)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.ReligionLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ReligionLookup");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7535),
                            Name = "Abia",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7536)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7539),
                            Name = "Adamawa",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7539)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7540),
                            Name = "Akwa Ibom",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7541)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7542),
                            Name = "Anambra",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7542)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7543),
                            Name = "Bauchi",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7543)
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7545),
                            Name = "Bayelsa",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7546)
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7547),
                            Name = "Benue",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7547)
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7548),
                            Name = "Borno",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7548)
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7549),
                            Name = "Cross River",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7549)
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7551),
                            Name = "Delta",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7552)
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7553),
                            Name = "Ebonyi",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7553)
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7554),
                            Name = "Edo",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7554)
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7559),
                            Name = "Ekiti",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7561)
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7562),
                            Name = "Enugu",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7562)
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7563),
                            Name = "Gombe",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7564)
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7565),
                            Name = "Imo",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7565)
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7566),
                            Name = "Jigawa",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7566)
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7568),
                            Name = "Kaduna",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7569)
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7569),
                            Name = "Kano",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7570)
                        },
                        new
                        {
                            Id = 20,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7571),
                            Name = "Katsina",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7571)
                        },
                        new
                        {
                            Id = 21,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7572),
                            Name = "Kebbi",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7572)
                        },
                        new
                        {
                            Id = 22,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7573),
                            Name = "Kogi",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7573)
                        },
                        new
                        {
                            Id = 23,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7574),
                            Name = "Kwara",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7575)
                        },
                        new
                        {
                            Id = 24,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7576),
                            Name = "Lagos",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7576)
                        },
                        new
                        {
                            Id = 25,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7577),
                            Name = "Nasarawa",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7577)
                        },
                        new
                        {
                            Id = 26,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7578),
                            Name = "Niger",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7578)
                        },
                        new
                        {
                            Id = 27,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7579),
                            Name = "Ogun",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7580)
                        },
                        new
                        {
                            Id = 28,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7581),
                            Name = "Ondo",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7581)
                        },
                        new
                        {
                            Id = 29,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7582),
                            Name = "Osun",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7582)
                        },
                        new
                        {
                            Id = 30,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7583),
                            Name = "Oyo",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7583)
                        },
                        new
                        {
                            Id = 31,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7584),
                            Name = "Plateau",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7585)
                        },
                        new
                        {
                            Id = 32,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7586),
                            Name = "Rivers",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7586)
                        },
                        new
                        {
                            Id = 33,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7587),
                            Name = "Sokoto",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7587)
                        },
                        new
                        {
                            Id = 34,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7589),
                            Name = "Taraba",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7590)
                        },
                        new
                        {
                            Id = 35,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7591),
                            Name = "Yobe",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7591)
                        },
                        new
                        {
                            Id = 36,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7592),
                            Name = "Zamfara",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7592)
                        },
                        new
                        {
                            Id = 37,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7593),
                            Name = "Federal Capital Territory",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(7594)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.NonLifeProduct.ProductStaging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductStaging");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PolicyDocuments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6066),
                            IsDeleted = false,
                            Name = "Driving Licenses",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6065)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6068),
                            IsDeleted = false,
                            Name = "Address Proof",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6067)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6069),
                            IsDeleted = false,
                            Name = "Identity Proof",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6069)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6075),
                            IsDeleted = false,
                            Name = "Vehicle Registration Certificate",
                            UpdateDated = new DateTime(2025, 4, 18, 0, 48, 46, 907, DateTimeKind.Utc).AddTicks(6070)
                        });
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingBeneficiaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BookingBeneficiaryTypes");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingBusinessInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingBusinessInformation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InitiatedWithCreditNote")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentCycle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PolicyActiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PolicyActiveStateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingDetail");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingOperationalSettlementDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("BookingOperationalSettlementDetails");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingOperationalTransactionsMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Premium")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingOperationalTransactionsMasters");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSbu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProportionPercentage")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingSbus");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSbuAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingSbuId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProportionPercentage")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingSbuId");

                    b.ToTable("BookingSbuAgents");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSubSbuAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingSbuAgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProportionPercentage")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingSbuAgentId");

                    b.ToTable("BookingSubSbuAgents");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSubjectAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingSubjectAttributes");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingUploadedDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PolicyDocumentId")
                        .IsUnique();

                    b.HasIndex("ProductDocumentId");

                    b.ToTable("BookingUploadedDocuments");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BusinessBrokeredDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessInfoId")
                        .IsUnique();

                    b.ToTable("BusinessBrokeredDetails");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.CoInsuranceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsurerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLead")
                        .HasColumnType("bit");

                    b.Property<decimal>("Portion")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessInfoId");

                    b.ToTable("CoInsuranceDetails");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.CreditNotePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingDetailId")
                        .HasColumnType("int");

                    b.Property<string>("CreditNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingDetailId");

                    b.ToTable("CreditNotePayments");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.EligibilityPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("EligibilityEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EligibilityStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExtended")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiptReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VoucherAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("EligibilityPeriods");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.FacultativeInsurer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsurerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsurerId")
                        .IsUnique();

                    b.ToTable("FacultativeInsurers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.PaymentTypeBookingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingDetailId");

                    b.ToTable("PaymentTypeBookingDetails");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CoverPeriod")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DocumentationComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LGA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<string>("SaveState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SlaPerformance")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SumInsured")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeOnly?>("TimeInQue")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuotationId");

                    b.ToTable("PolicyBookings");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.PolicyBookingGenericLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenericLocationId")
                        .HasColumnType("int");

                    b.Property<int>("PolicyBookingId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductGenericLocationFieldId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenericLocationId");

                    b.HasIndex("PolicyBookingId");

                    b.HasIndex("ProductGenericLocationFieldId");

                    b.ToTable("PolicyBookingGenericLocations");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ExpenseLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ExpenseLedgers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.IncomeLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("IncomeLedgers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanBookPolicy")
                        .HasColumnType("bit");

                    b.Property<string>("ClaimsAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomeAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrentlyRejected")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinimumPremium")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PercentageProgress")
                        .HasColumnType("int");

                    b.Property<string>("PremiumAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductClassId")
                        .HasColumnType("int");

                    b.Property<string>("ProductSetupStages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<bool>("RequireUnderWritingAtBooking")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresGenericLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresUnderWriter")
                        .HasColumnType("bit");

                    b.Property<string>("SetupStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductClassId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductAdditionalSubjectTypeCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdditionalCoverId")
                        .HasColumnType("int");

                    b.Property<string>("CoverStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FixedPremium")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("LimitType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaximumAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSubjectTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("RateApplied")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("RateTable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isFixed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSubjectTypeId");

                    b.ToTable("ProductAdditionalCovers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductAllowedPaymentFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAllowedPaymentFrequencies");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductApprovingOfficePriceConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxPricePercentage")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MinPricePercentage")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("ProductApprovingOfficePriceConfigurations");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductBaseSubjectTypeCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseCoverId")
                        .HasColumnType("int");

                    b.Property<string>("CoverStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FixedPremium")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("LimitType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaximumAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSubjectTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("RateApplied")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("RateTable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isFixed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSubjectTypeId");

                    b.ToTable("ProductBaseCovers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductCategorySelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsGeneric")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategorySelections");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductCostOfInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionSourceId")
                        .HasColumnType("int");

                    b.Property<string>("CostBearer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CostTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreditAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebitAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpenseAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PayableAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TermValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCostOfInsurances");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductCostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CostTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCostTypes");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDeductible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeductibleRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("FixedAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("InsuredSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDeductibles");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDisapproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommented")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDisapprovals");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductDocumentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductDocumentCategoryId");

                    b.ToTable("ProductDocuments");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDocumentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDocumentCategories");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDurationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppliedFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDurationDetails");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDurationRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DurationRate")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDurationRate");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductFeeSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PercentageValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeeSetups");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiredGenericLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiredSpecificGenericLocation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGenericLocations");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocationDropdownOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationFieldId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationFieldId");

                    b.ToTable("ProductGenericLocationDropdownOptions");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocationField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<int>("GenericLocationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenericLocationId");

                    b.ToTable("ProductGenericLocationFields");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductPenalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LowerLimit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Penalty")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UpperLimit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPenalties");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductPriceConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AffectPricing")
                        .HasColumnType("bit");

                    b.Property<decimal>("AffectRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Affects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EffectType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductPriceConfigurations");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductStageAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductStageAudits");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectAttributeDropdownMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("ChildValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("ParentValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChildAttributeId");

                    b.HasIndex("ParentAttributeId");

                    b.ToTable("ProductSubjectAttributeDropdownMappings");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSubjectCategories");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSubjectTypes");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AvailableAtQuotation")
                        .HasColumnType("bit");

                    b.Property<string>("ComparativeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComparativeValueType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataLength")
                        .HasColumnType("int");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GenericStateLgaStreet")
                        .HasColumnType("bit");

                    b.Property<bool>("HasParentChildOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSumInsured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductSubjectCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSubjectTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresUnderwriting")
                        .HasColumnType("bit");

                    b.Property<string>("SpecifyOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductSubjectCategoryId");

                    b.HasIndex("ProductSubjectTypeId");

                    b.ToTable("ProductSubjectTypeAttributes");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttributeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSpecialAttribute")
                        .HasColumnType("bit");

                    b.Property<string>("OptionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentOptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentOptionId");

                    b.ToTable("ProductSubjectTypeAttributeOptions");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductThresholds");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ReceivableLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ReceivableLedgers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Channel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("FleetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("LockedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LostRatio")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PolicyDurationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Premium")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PreviousQuoteId")
                        .HasColumnType("int");

                    b.Property<string>("ProductClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<string>("QuoteId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuotePreferencesId")
                        .HasColumnType("int");

                    b.Property<string>("QuoteStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuoteTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresUnderwritingApproval")
                        .HasColumnType("bit");

                    b.Property<string>("RiskLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SLA")
                        .HasColumnType("float");

                    b.Property<decimal>("SLAUsage")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("StateOfOperation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SumInsured")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("PolicyDurationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuotePreferencesId");

                    b.HasIndex("QuoteTypeId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuotationAdditionalCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Indicator")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductAdditionalSubjectTypeCoverId")
                        .HasColumnType("int");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductAdditionalSubjectTypeCoverId");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationAdditionalCovers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuotationAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationAttributeValues");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuotationBaseCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Indicator")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductBaseSubjectTypeCoverId")
                        .HasColumnType("int");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductBaseSubjectTypeCoverId");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationBaseCovers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuotationPriceCalculationAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdjustedPremium")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Affects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AppliedRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuotationPriceCalculationAudits");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuoteNegotiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InitiatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NegotiationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NegotiationRound")
                        .HasColumnType("int");

                    b.Property<string>("NegotiationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequestedDiscount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ResponseDiscount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteNegotiations");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Reinsurance.ReinsuranceAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgreementCaption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgreementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExpiryDate")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ReinsuranceAgreements");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Reinsurance.ReinsuranceAgreementChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("ReinsuranceAgreementChats");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Reinsurance.ReinsuranceProtectionSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Deductible")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("NumbersOfLines")
                        .HasColumnType("int");

                    b.Property<string>("ProtectionSubType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtectionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RetentionAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TreatyCapacity")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnderWriterCapacity")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdateDated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("ReinsuranceProtectionSchedules");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ApprovalWorks.WorkFlowApproval", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ApprovalWorks.Workflow", "Workflows")
                        .WithMany("WorkflowApprovals")
                        .HasForeignKey("WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ApprovalWorks.WorkflowApprovingOffice", "WorkflowApprovingOffice")
                        .WithMany("WorkFlowApprovals")
                        .HasForeignKey("WorkflowApprovingOfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WorkflowApprovingOffice");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ApprovalWorks.WorkflowApprovingOffice", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ApprovalWorks.Workflow", "Workflows")
                        .WithMany("WorkflowApprovingOffices")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.BankAccount", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.BankLookup", "BankLookup")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankLookup");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.ContactPerson", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.Customer", "Customer")
                        .WithMany("ContactPeople")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CorporateContactPerson_Customers");

                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.CustomerTitleLookup", "Title")
                        .WithMany("ContactPeople")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_ContactPersons_CustomerTitles");

                    b.Navigation("Customer");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.Customer", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.Lookups.GenderLookup", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Customers_Genders");

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.MaritalStatusLookup", "MaritalStatus")
                        .WithMany("Customers")
                        .HasForeignKey("MaritalStatusId")
                        .HasConstraintName("FK_Customers_MaritalStatuses");

                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.NatureOfBusinessLookup", "NatureOfBusiness")
                        .WithMany("Customers")
                        .HasForeignKey("NatureOfBusinessId")
                        .HasConstraintName("FK_Customers_NatureOfBusiness");

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.ReligionLookup", "Religion")
                        .WithMany("Customers")
                        .HasForeignKey("ReligionId")
                        .HasConstraintName("FK_Customers_Religion");

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.State", "StateOfOrigin")
                        .WithMany("Customers")
                        .HasForeignKey("StateOfOriginId")
                        .HasConstraintName("FK_Customers_States");

                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.CustomerTitleLookup", "Title")
                        .WithMany("Customers")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_Customers_CustomerTitles");

                    b.Navigation("Gender");

                    b.Navigation("MaritalStatus");

                    b.Navigation("NatureOfBusiness");

                    b.Navigation("Religion");

                    b.Navigation("StateOfOrigin");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerAddress", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerAddresses_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerBankAccount", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.BankAccount", "BankAccount")
                        .WithMany("CustomerBankAccounts")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.Customer", "Customers")
                        .WithMany("CustomerBankAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerDocument", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.Customer", "Customer")
                        .WithMany("CustomerDocuments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerDocuments_Customers");

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.DocumentLookup", "DocumentType")
                        .WithMany("CustomerDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerLedger", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.Customer", "Customer")
                        .WithMany("CustomerLedgers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerLedgers_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerModification", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.CustomerOnboardingApproval", "CustomerApproval")
                        .WithMany("CustomerModifications")
                        .HasForeignKey("CustomerApprovalId")
                        .HasConstraintName("FK_CustomerModification_CustomerOnboardingApprovals");

                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.Customer", "Customer")
                        .WithMany("CustomerModifications")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerModificationApprovals_Customers");

                    b.Navigation("Customer");

                    b.Navigation("CustomerApproval");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerModificationDocument", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.CustomerModification", "CustomerModification")
                        .WithMany("CustomerModificationDocuments")
                        .HasForeignKey("CustomerModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.DocumentLookup", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerModification");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerOccupation", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.Customer", "Customer")
                        .WithMany("CustomerOccupations")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerOccupations_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerOnboardingApproval", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.Customer", "Customer")
                        .WithMany("CustomerOnboardingApprovals")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerOnboardingApprovals_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerPhoneBook", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.CustomerEntities.Customer", "Customer")
                        .WithMany("CustomerPhoneBooks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerPhoneBooks_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeDropdownMapping", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeItem", "ChildAttribute")
                        .WithMany()
                        .HasForeignKey("ChildAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeItem", "ParentAttribute")
                        .WithMany("LineOfBusinessAttributeDropdownMapping")
                        .HasForeignKey("ParentAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildAttribute");

                    b.Navigation("ParentAttribute");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeItem", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeCategory", "LineOfBusinessAttributeCategory")
                        .WithMany("LineOfBusinessAttributeItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("BusinessAttributeItemDropdownValues", "BusinessAttributeItemDropdownValues", b1 =>
                        {
                            b1.Property<int>("LineOfBusinessAttributeItemId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BusinessAttributeItemDropdownValues");

                            b1.HasKey("LineOfBusinessAttributeItemId", "Id");

                            b1.ToTable("BusinessAttributeItemDropdownValues");

                            b1.WithOwner()
                                .HasForeignKey("LineOfBusinessAttributeItemId");
                        });

                    b.Navigation("BusinessAttributeItemDropdownValues");

                    b.Navigation("LineOfBusinessAttributeCategory");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessInsuredObject", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeCategory", "LineOfBusinessAttributeCategory")
                        .WithMany("LineOfBusinessInsuredObjects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineOfBusinessAttributeCategory");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.CarModel", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.Lookups.CarMake", "CarMake")
                        .WithMany("Models")
                        .HasForeignKey("CarMakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.CarModel", null)
                        .WithMany("CarModels")
                        .HasForeignKey("CarModelId");

                    b.Navigation("CarMake");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.DocumentLookup", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.Lookups.DocumentCategory", "DocumentCategory")
                        .WithMany("DocumentLookups")
                        .HasForeignKey("DocumentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DocumentCategory");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.LocalGovernmentAreaLookup", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.Lookups.State", "State")
                        .WithMany("LocalGovernmentAreaLookups")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingBusinessInformation", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", "PolicyBooking")
                        .WithMany("BookingBusinessInformation")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolicyBooking");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingDetail", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", "PolicyBooking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolicyBooking");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingOperationalSettlementDetails", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.BookingOperationalTransactionsMaster", "BookingOperationalTransactionsMaster")
                        .WithMany("BookingOperationalSettlementDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookingOperationalTransactionsMaster");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingOperationalTransactionsMaster", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", "PolicyBooking")
                        .WithMany("BookingOperationalTransactionsMaster")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PolicyBooking");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSbu", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", "PolicyBooking")
                        .WithMany("BookingSbus")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolicyBooking");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSbuAgent", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.BookingSbu", "BookingSbu")
                        .WithMany("BookingSbuAgents")
                        .HasForeignKey("BookingSbuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingSbu");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSubSbuAgent", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.BookingSbuAgent", "BookingSbuAgent")
                        .WithMany("BookingSubSbuAgent")
                        .HasForeignKey("BookingSbuAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingSbuAgent");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSubjectAttribute", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttribute", "ProductSubjectTypeAttribute")
                        .WithMany("BookingSubjectAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", "PolicyBooking")
                        .WithMany("BookingSubjectAttributes")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolicyBooking");

                    b.Navigation("ProductSubjectTypeAttribute");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingUploadedDocument", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", "PolicyBooking")
                        .WithOne("BookingUploadedDocument")
                        .HasForeignKey("RubyNonlife.Domain.Models.PolicyEntities.BookingUploadedDocument", "PolicyDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductDocument", "ProductDocument")
                        .WithMany("BookingUploadedDocuments")
                        .HasForeignKey("ProductDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolicyBooking");

                    b.Navigation("ProductDocument");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BusinessBrokeredDetail", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.BookingBusinessInformation", "BookingBusinessInformation")
                        .WithOne("BusinessBrokeredDetail")
                        .HasForeignKey("RubyNonlife.Domain.Models.PolicyEntities.BusinessBrokeredDetail", "BusinessInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingBusinessInformation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.CoInsuranceDetail", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.BookingBusinessInformation", "BookingBusinessInformation")
                        .WithMany("CoInsuranceDetails")
                        .HasForeignKey("BusinessInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingBusinessInformation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.CreditNotePayment", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.BookingDetail", "BookingDetail")
                        .WithMany("CreditNotePayments")
                        .HasForeignKey("BookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingDetail");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.EligibilityPeriod", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", "PolicyBooking")
                        .WithMany("EligibilityPeriods")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolicyBooking");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.FacultativeInsurer", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.BookingBusinessInformation", "BookingBusinessInformation")
                        .WithOne("FacultativeInsurer")
                        .HasForeignKey("RubyNonlife.Domain.Models.PolicyEntities.FacultativeInsurer", "InsurerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingBusinessInformation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.PaymentTypeBookingDetail", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.BookingDetail", "BookingDetail")
                        .WithMany("PaymentTypeBookings")
                        .HasForeignKey("BookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingDetail");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.QuoteEntities.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.PolicyBookingGenericLocation", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocation", "ProductGenericLocation")
                        .WithMany("PolicyBookingGenericLocation")
                        .HasForeignKey("GenericLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", "PolicyBooking")
                        .WithMany("PolicyBookingGenericLocation")
                        .HasForeignKey("PolicyBookingId")
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocationField", null)
                        .WithMany("GenericLocationAttribute")
                        .HasForeignKey("ProductGenericLocationFieldId");

                    b.Navigation("PolicyBooking");

                    b.Navigation("ProductGenericLocation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ExpenseLedger", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ExpenseLedgers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.IncomeLedger", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("IncomeLedger")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.Product", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.Lookups.ProductClass", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.ProductVariant", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductVariantId");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductAdditionalSubjectTypeCover", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductAdditionalSubjectTypeCovers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectType", null)
                        .WithMany("ProductAdditionalCovers")
                        .HasForeignKey("ProductSubjectTypeId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductAllowedPaymentFrequency", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductAllowedPaymentFrequency")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductApprovingOfficePriceConfiguration", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductPriceConfiguration", "ProductPriceConfiguration")
                        .WithMany("ApprovingOfficePriceConfigurations")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductPriceConfiguration");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductBaseSubjectTypeCover", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductBaseSubjectTypeCovers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectType", null)
                        .WithMany("ProductBaseSubjectTypeCovers")
                        .HasForeignKey("ProductSubjectTypeId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductCategorySelection", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductCategorySelections")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductCostOfInsurance", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductCostOfInsurances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductCostType", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductCostType")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDeductible", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductDeductibles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDisapproval", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductDisapprovals")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDocument", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductDocumentCategory", "ProductDocumentCategory")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductDocumentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDocumentCategory");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDocumentCategory", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductDocumentCategory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDurationDetail", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductDurationDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDurationRate", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductDurationRates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductFeeSetup", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductFeeSetup")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocation", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductGenericLocations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocationDropdownOption", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocationField", "ProductGenericLocationField")
                        .WithMany("ProductGenericLocationDropdownOptions")
                        .HasForeignKey("LocationFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGenericLocationField");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocationField", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocation", "ProductGenericLocation")
                        .WithMany("ProductGenericLocationFields")
                        .HasForeignKey("GenericLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGenericLocation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductPenalty", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductPenalties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductPriceConfiguration", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttribute", "ProductSubjectTypeAttribute")
                        .WithMany("ProductPriceConfigurations")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectCategory", "ProductSubjectCategory")
                        .WithMany("ProductPriceConfigurations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductSubjectCategory");

                    b.Navigation("ProductSubjectTypeAttribute");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductStageAudit", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductStageAudits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectAttributeDropdownMapping", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttribute", "ChildAttribute")
                        .WithMany()
                        .HasForeignKey("ChildAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttribute", "ParentAttribute")
                        .WithMany("DropdownMappings")
                        .HasForeignKey("ParentAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildAttribute");

                    b.Navigation("ParentAttribute");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectCategory", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductSubjectCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectType", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectCategory", "ProductSubjectCategory")
                        .WithMany("ProductSubjectTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductSubjectTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductSubjectCategory");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttribute", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectCategory", "ProductSubjectCategory")
                        .WithMany("ProductSubjectTypeAttributes")
                        .HasForeignKey("ProductSubjectCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectType", "ProductSubjectType")
                        .WithMany("ProductSubjectTypeAttributes")
                        .HasForeignKey("ProductSubjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DropdownValues", "DropdownValues", b1 =>
                        {
                            b1.Property<int>("ProductSubjectTypeAttributeId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DropdownValue");

                            b1.HasKey("ProductSubjectTypeAttributeId", "Id");

                            b1.ToTable("DropdownValues");

                            b1.WithOwner()
                                .HasForeignKey("ProductSubjectTypeAttributeId");
                        });

                    b.Navigation("DropdownValues");

                    b.Navigation("ProductSubjectCategory");

                    b.Navigation("ProductSubjectType");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttributeOption", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttributeOption", "ParentOption")
                        .WithMany("ChildOptions")
                        .HasForeignKey("ParentOptionId");

                    b.Navigation("ParentOption");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductThreshold", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ProductThresholds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ReceivableLedger", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("ReceivableLedgers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.Quotation", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.Lookups.BusinessType", "BusinessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.PolicyDuration", "PolicyDuration")
                        .WithMany()
                        .HasForeignKey("PolicyDurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.QuotePreferences", "QuotePreferences")
                        .WithMany("Quotation")
                        .HasForeignKey("QuotePreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.Lookups.QuoteType", "QuoteType")
                        .WithMany()
                        .HasForeignKey("QuoteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessType");

                    b.Navigation("PolicyDuration");

                    b.Navigation("Product");

                    b.Navigation("QuotePreferences");

                    b.Navigation("QuoteType");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuotationAdditionalCover", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductAdditionalSubjectTypeCover", "ProductAdditionalSubjectTypeCover")
                        .WithMany("QuotationAdditionalCover")
                        .HasForeignKey("ProductAdditionalSubjectTypeCoverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.QuoteEntities.Quotation", "Quotation")
                        .WithMany("QuotationAdditionalCovers")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAdditionalSubjectTypeCover");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuotationAttributeValue", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttribute", "ProductSubjectTypeAttribute")
                        .WithMany("QuoteAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.QuoteEntities.Quotation", "Quotation")
                        .WithMany("QuotationAttributeValues")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductSubjectTypeAttribute");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuotationBaseCover", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.ProductEntities.ProductBaseSubjectTypeCover", "ProductBaseSubjectTypeCover")
                        .WithMany("QuotationBaseCover")
                        .HasForeignKey("ProductBaseSubjectTypeCoverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubyNonlife.Domain.Models.QuoteEntities.Quotation", "Quotation")
                        .WithMany("QuotationBaseCovers")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBaseSubjectTypeCover");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuotationPriceCalculationAudit", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.QuoteEntities.Quotation", "Quotation")
                        .WithMany("QuotationPriceCalculationAudits")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.QuoteNegotiation", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.QuoteEntities.Quotation", "Quotation")
                        .WithMany("QuoteNegotiation")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Reinsurance.ReinsuranceAgreementChat", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.Reinsurance.ReinsuranceAgreement", "ReinsuranceAgreement")
                        .WithMany("ReinsuranceAgreementChat")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReinsuranceAgreement");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Reinsurance.ReinsuranceProtectionSchedule", b =>
                {
                    b.HasOne("RubyNonlife.Domain.Models.Reinsurance.ReinsuranceAgreement", "ReinsuranceAgreement")
                        .WithMany("ReinsuranceProtectionSchedule")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReinsuranceAgreement");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ApprovalWorks.Workflow", b =>
                {
                    b.Navigation("WorkflowApprovals");

                    b.Navigation("WorkflowApprovingOffices");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ApprovalWorks.WorkflowApprovingOffice", b =>
                {
                    b.Navigation("WorkFlowApprovals");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.BankAccount", b =>
                {
                    b.Navigation("CustomerBankAccounts");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.BankLookup", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.Customer", b =>
                {
                    b.Navigation("ContactPeople");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerBankAccounts");

                    b.Navigation("CustomerDocuments");

                    b.Navigation("CustomerLedgers");

                    b.Navigation("CustomerModifications");

                    b.Navigation("CustomerOccupations");

                    b.Navigation("CustomerOnboardingApprovals");

                    b.Navigation("CustomerPhoneBooks");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerModification", b =>
                {
                    b.Navigation("CustomerModificationDocuments");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerOnboardingApproval", b =>
                {
                    b.Navigation("CustomerModifications");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.CustomerTitleLookup", b =>
                {
                    b.Navigation("ContactPeople");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.CustomerEntities.NatureOfBusinessLookup", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeCategory", b =>
                {
                    b.Navigation("LineOfBusinessAttributeItems");

                    b.Navigation("LineOfBusinessInsuredObjects");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.GenericEntities.LineOfBusinessAttributeItem", b =>
                {
                    b.Navigation("LineOfBusinessAttributeDropdownMapping");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.CarMake", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.CarModel", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.DocumentCategory", b =>
                {
                    b.Navigation("DocumentLookups");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.DocumentLookup", b =>
                {
                    b.Navigation("CustomerDocuments");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.GenderLookup", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.MaritalStatusLookup", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.ProductClass", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.ProductVariant", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.QuotePreferences", b =>
                {
                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.ReligionLookup", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Lookups.State", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("LocalGovernmentAreaLookups");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingBusinessInformation", b =>
                {
                    b.Navigation("BusinessBrokeredDetail");

                    b.Navigation("CoInsuranceDetails");

                    b.Navigation("FacultativeInsurer");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingDetail", b =>
                {
                    b.Navigation("CreditNotePayments");

                    b.Navigation("PaymentTypeBookings");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingOperationalTransactionsMaster", b =>
                {
                    b.Navigation("BookingOperationalSettlementDetails");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSbu", b =>
                {
                    b.Navigation("BookingSbuAgents");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.BookingSbuAgent", b =>
                {
                    b.Navigation("BookingSubSbuAgent");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.PolicyEntities.PolicyBooking", b =>
                {
                    b.Navigation("BookingBusinessInformation");

                    b.Navigation("BookingDetails");

                    b.Navigation("BookingOperationalTransactionsMaster");

                    b.Navigation("BookingSbus");

                    b.Navigation("BookingSubjectAttributes");

                    b.Navigation("BookingUploadedDocument");

                    b.Navigation("EligibilityPeriods");

                    b.Navigation("PolicyBookingGenericLocation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.Product", b =>
                {
                    b.Navigation("ExpenseLedgers");

                    b.Navigation("IncomeLedger");

                    b.Navigation("ProductAdditionalSubjectTypeCovers");

                    b.Navigation("ProductAllowedPaymentFrequency");

                    b.Navigation("ProductBaseSubjectTypeCovers");

                    b.Navigation("ProductCategorySelections");

                    b.Navigation("ProductCostOfInsurances");

                    b.Navigation("ProductCostType");

                    b.Navigation("ProductDeductibles");

                    b.Navigation("ProductDisapprovals");

                    b.Navigation("ProductDocumentCategory");

                    b.Navigation("ProductDurationDetails");

                    b.Navigation("ProductDurationRates");

                    b.Navigation("ProductFeeSetup");

                    b.Navigation("ProductGenericLocations");

                    b.Navigation("ProductPenalties");

                    b.Navigation("ProductStageAudits");

                    b.Navigation("ProductSubjectCategories");

                    b.Navigation("ProductSubjectTypes");

                    b.Navigation("ProductThresholds");

                    b.Navigation("ReceivableLedgers");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductAdditionalSubjectTypeCover", b =>
                {
                    b.Navigation("QuotationAdditionalCover");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductBaseSubjectTypeCover", b =>
                {
                    b.Navigation("QuotationBaseCover");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDocument", b =>
                {
                    b.Navigation("BookingUploadedDocuments");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductDocumentCategory", b =>
                {
                    b.Navigation("ProductDocuments");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocation", b =>
                {
                    b.Navigation("PolicyBookingGenericLocation");

                    b.Navigation("ProductGenericLocationFields");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductGenericLocationField", b =>
                {
                    b.Navigation("GenericLocationAttribute");

                    b.Navigation("ProductGenericLocationDropdownOptions");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductPriceConfiguration", b =>
                {
                    b.Navigation("ApprovingOfficePriceConfigurations");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectCategory", b =>
                {
                    b.Navigation("ProductPriceConfigurations");

                    b.Navigation("ProductSubjectTypeAttributes");

                    b.Navigation("ProductSubjectTypes");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectType", b =>
                {
                    b.Navigation("ProductAdditionalCovers");

                    b.Navigation("ProductBaseSubjectTypeCovers");

                    b.Navigation("ProductSubjectTypeAttributes");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttribute", b =>
                {
                    b.Navigation("BookingSubjectAttributes");

                    b.Navigation("DropdownMappings");

                    b.Navigation("ProductPriceConfigurations");

                    b.Navigation("QuoteAttributes");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.ProductEntities.ProductSubjectTypeAttributeOption", b =>
                {
                    b.Navigation("ChildOptions");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.QuoteEntities.Quotation", b =>
                {
                    b.Navigation("QuotationAdditionalCovers");

                    b.Navigation("QuotationAttributeValues");

                    b.Navigation("QuotationBaseCovers");

                    b.Navigation("QuotationPriceCalculationAudits");

                    b.Navigation("QuoteNegotiation");
                });

            modelBuilder.Entity("RubyNonlife.Domain.Models.Reinsurance.ReinsuranceAgreement", b =>
                {
                    b.Navigation("ReinsuranceAgreementChat");

                    b.Navigation("ReinsuranceProtectionSchedule");
                });
#pragma warning restore 612, 618
        }
    }
}
